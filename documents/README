README for Weekly Planner

Overview:  This codebase is creating a planner system to help make it easier to keep track all the
           events in people's lives. A planner system contains multiple users, each with their own
           schedule. In this schedule, people can add the events they have to attend in the week.
           This codebase assumes that the implementer can read Java to an intermediate
           degree.

Quick Start: How to get started with our code:
            // Upload an a user to the system with an existing .xml schedule

            PlannerSystem system = new PlannerSystem();
            system.addUserFromFile(String user, File file, FileHandler handler);

                     - how to instantiate our FileHandler: new XMLFileHander();

            // Pick a user's schedule to display

            Schedule scheduleToDisplay = system.pickCurrentDisplay(String user);

                     - user must exist in the system

            // create an XML file from a user's schedule
            system.makeUserFile(String user, FileHandler fileHandler);

                      - will create an XML file locally

            // to remove a user
            system.modifySystem(String user, Schedule schedule, false);

            // to add a user with a schedule (not in xml)
            system.modifySystem(String user, Schedule schedule, true);

            // to schedule an event for all users in its invitee list
            system.scheduleEvent(Event event);

            // to remove an event for all users if they are host, or just one if they aren't host
            system.removeEvent(Event event);

            // to make a new empty schedule with a user
            Schedule schedule = new Schedule(String user);

            // to make your own events
            Event event = new Event(String name, String location, boolean isOnline, Day startDay,
                             Time startTime, Day endDay, Time endTime, List<String> invitees)

            ...
            //get a view of all the events in your week
            PlannerView plannerView = new PlannerSystemView(yourSchedule);
            plannerView.render();

Key Components:
    There are four main components to this planner:
        1. Model: The model handles the schedule's data by allowing you to add events to
                schedules, remove events from schedules, modify events, etc. It makes it easier
                to move around your events as schedules should be flexible enough to do that.
        2. View: The view, given a schedule, creates a textual view of the schedule to make it
                easier to visualize your schedule.
        3. Filehandler: The filehandler allows you to convert your schedule into a file and
                vice versa.*
        4. Controller: The controller is not implemented yet, but it will allow you to control
                the GUI (graphical user interface) of the planner system or the text view .

* FileHandler is made a separate component from the model because the reading and writing xml files
doesn't effect the behavior of the system. In order to keep it separate, the system's convert to
file and upload file methods allow for a handler to be taken in-- in which in the future a different
handler could allow conversion between different file types etc. This helps with encapsulation
and reusability later.

Key Subcomponents:
    Within the key components of this planner:
        1. Model: In the model, a PlannerSystem has users and schedules. Each user has an
                individual Schedule. A Schedule has the user and a list of events. An Event has a
                Day (start day and end day) and a Time (start time and end time).
        2. View: In the view, a PlannerSystemView takes in a Schedule that you'd like to convert
                into textual view.
        3. Filehandler: The filehandler has a XMLFileHandler which can read from files and write to
                files. It also allows you to convert a Schedule to an XML file and vice versa.

Source Organization:
    hw_5
        src (contains 4 main components)
            controller
            filehandler
                FileHandler (interface)
                XMLFileHandler (class that implements FileHandler)
            model
                Day (enum for days of the week)
                Event (class that represents a single Event)
                PlannerModel (an interface with all of the necessary methods for planners)
                PlannerSystem (class that extends PlannerModel)
                Schedule (class that represents a single Schedule)
                Time (class that represents a Time)
            view
                PlannerSystemView (a class that extends PlannerView)
                PlannerView (an interface with all necessary methods for viewing a planner)
        test (contains tests for 4 main components and all the subcomponents)
            filehandler
                test for XMLFileHandler
            model
                tests for day, event, plannersystem, schedule, and time
            view
                test for PlannerSystemView

Changes from Part 2:
    We're included lots of new functionality to this planner system. It now includes a GUI that
    allows you to view the planner system in a better way than before. Instead of just being a
    textual view of your schedule, it contains visuals that update your schedule accordingly.
    More about the classes and interfaces we've added are in our source organization.

Updates for part 3;
 - added schedule to view properly
 - linked the view buttons to the model so that creating/modifying/removing events connects to
 the model
 - Made it so if you click events it pulls up the correct event
 - added a mock to the examples to make controller tests

 CHANGES FOR PART 3:
 Added the schedule event frame along with its functionality, additionally added the components for
 the planner's controller which should create remove and modify events as needed. Also the features
 interface which describes these methods for the controller. Side note, we know a lot of the
 functionality does not work entirely well or as intended, however, we gave our best effort and feel
 like the general logic of the functions are decent, there are just some errors that we can't seem
 to iron out in this project.

 Updates for part 4:
 - Code sent to customers (what we would have sent)
    - We previously only had interfaces for PlannerModel and ReadOnlyPlannerModel
    - Realizing that when our provider code didn't take in interfaces in their view
    we knew that anyone using our code would not be able to use it without our implementations,
    we updated our code to include interfaces for Schedule() and Events (EventInterface)
    - We also updated our view to take in/use interfaces for schedule and event instead of
     directly taking in classes.
    - We updated our features to not handle creating new event frames and instead allowed our
    view to do that.
    - Fixed Remove and Modify from last section to fully work!

 - Adapters:
    - Model:
        - We created an Adapter for all of the model interfaces
        - MainSystem:
            - PlannerSystemAdapter extends PlannerSystem and implements ICentralSystem
            - When their view takes in/uses an ICentralSystem it will take in this adapter and
            the adapter will call super on its methods to delegate to our model implementation
        - Events:
            - EventAdapter implements their event interface (IEvent) and has-a Event
            (from our model)
            - When their view calls on an IEvent, it would call our adapter and delegate to an
            instance of our model's event
        - Schedule:
            - ScheduleAdapter implements their event interface (ISchedule) and has-a Event
            (from our model)
            - When their view calls on an ISchedule, it would call our adapter and delegate to
             an instance of our model's schedule
        - Schedule:
    - View:
        - Main System:
            - MainPlannerAdapter extends PlannerSystemViewGUI and has-a MainFrame from the provider
            code
            - When our adapted view is called it delegates to their view
    - Controller:
        - Controller adapter has our controller but is a Features so when calls are made to it,
        it delegates to our controller.

 - Commands:
    - No args: OG view and anytime strategy
    - First arg: "workday" - workday Strategy, OG view; anything else will give anytime strat
    - Second arg: 2 - other view; anything else will give og view

 - Implementation Note: The providers view seems to be very tightly coupled with the model
    - Since their view directly edits their model (ie creating events and adding schedules to the
    model) it would be too long of a process for them to refactor the whole view
    to make a features class/interface that the view delegates to.
    - Because of this, It would be impossible at its current state to get their view to work with
    our model
    - Some methods in adapters could not be fulfilled because it would require access to specific
    classes
    - Provider implementation of view is commented out because it asks for too many implementation
    details from their specific model.

